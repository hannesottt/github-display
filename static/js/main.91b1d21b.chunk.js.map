{"version":3,"sources":["github.ts","index.tsx"],"names":["GitHub","username","client_ID","client_secret","user","apiUrl","repos_count","repos_sort","this","urlProfile","urlRepos","fetch","responseProfile","responseRepos","json","profile","repos","GithubDisplay","github","getUserData","then","data","setState","APIData","className","alt","src","state","avatar_url","name","login","href","html_url","index","repoData","key","id","full_name","language","watchers_count","stargazers_count","forks_count","console","log","repoElements","Array","i","length","push","renderRepo","renderPfpColumn","renderButtons","React","Component","ReactDOM","render","document","getElementById"],"mappings":"wPAAaA,EAAb,WAOI,WAAYC,GAAmB,yBANvBC,eAMsB,OALtBC,mBAKsB,OAJ9BC,UAI8B,OAHtBC,YAGsB,OAF9BC,iBAE8B,OAD9BC,gBAC8B,EAC1BC,KAAKN,UAAY,uBACjBM,KAAKL,cAAgB,2CACrBK,KAAKJ,KAAOH,EACZO,KAAKH,OAAS,gCACdG,KAAKF,YAAc,EACnBE,KAAKD,WAAa,eAb1B,mJAiBYE,EAjBZ,UAiBqCD,KAAKH,QAjB1C,OAiBmDG,KAAKJ,KAjBxD,sBAiB0EI,KAAKN,UAjB/E,0BAiB0GM,KAAKL,eACnGO,EAlBZ,UAkBmCF,KAAKH,QAlBxC,OAkBiDG,KAAKJ,KAlBtD,2BAkB6EI,KAAKF,YAlBlF,iBAkBsGE,KAAKD,WAlB3G,sBAkBmIC,KAAKN,UAlBxI,0BAkBmKM,KAAKL,eAlBxK,mBAoBsCQ,MAAMF,IApB5C,cAoBcG,EApBd,0BAqBoCD,MAAMD,IArB1C,cAqBcG,EArBd,2BAuB8BD,EAAgBE,QAvB9C,eAuBcC,EAvBd,2BAwB4BF,EAAcC,QAxB1C,eAwBcE,EAxBd,yBA0Be,CACHD,UACAC,UA5BZ,yDCMMC,E,2MACLC,OAAkB,IAAIlB,EAAO,c,mFAER,IAAD,OACnBQ,KAAKU,OAAOC,cACVC,MAAK,SAAAC,GACL,EAAKC,SAAS,CAACC,QAASF,S,wCAK1B,OACC,yBAAKG,UAAU,qCACd,yBAAKA,UAAU,gCAAgCC,IAAI,kBAAkBC,IAAKlB,KAAKmB,MAAMJ,QAAQR,QAAQa,aACrG,wBAAIJ,UAAU,eAAehB,KAAKmB,MAAMJ,QAAQR,QAAQc,MACxD,wBAAIL,UAAU,6BAA6BhB,KAAKmB,MAAMJ,QAAQR,QAAQe,U,sCAMxE,OACC,yBAAKN,UAAU,iCACd,uBAAGA,UAAU,0BAA0BO,KAAMvB,KAAKmB,MAAMJ,QAAQR,QAAQiB,UAAxE,mB,iCAKQC,GACV,IAAIC,EAAW1B,KAAKmB,MAAMJ,QAAQP,MAAMiB,GACxC,OACC,yBAAKT,UAAU,mCAAmCW,IAAKD,EAASE,IAC/D,yBAAKZ,UAAU,QACd,yBAAKA,UAAU,aACd,wBAAIA,UAAU,cAAa,uBAAGO,KAAMG,EAASF,UAAWE,EAASG,WAAc,0BAAMb,UAAU,eAAeU,EAASI,WACvH,yBAAKd,UAAU,aAAaU,EAASK,eAArC,cAAgEL,EAASM,iBAAzE,WAAqGN,EAASO,YAA9G,e,+BASJ,GADAC,QAAQC,IAAInC,KAAKmB,OACbnB,KAAKmB,MAAO,CAEf,IADA,IAAIiB,EAA+B,IAAIC,MAC9BC,EAAI,EAAGA,EAAItC,KAAKmB,MAAMJ,QAAQP,MAAM+B,OAAQD,IACpDF,EAAaI,KAAKxC,KAAKyC,WAAWH,IAEnC,OACC,yBAAKtB,UAAU,mBACbhB,KAAK0C,kBACL1C,KAAK2C,gBACN,wBAAI3B,UAAU,0BAAd,gBACCoB,GAIH,OACC,yBAAKpB,UAAU,aACd,yBAAKA,UAAU,eAAf,mB,GA5DuB4B,IAAMC,WAmElCC,IAASC,OAAO,kBAAC,EAAD,MAAmBC,SAASC,eAAe,U","file":"static/js/main.91b1d21b.chunk.js","sourcesContent":["export class GitHub {\r\n    private client_ID : string;\r\n    private client_secret: string;\r\n    user : string;\r\n    private apiUrl : string;\r\n    repos_count : number;\r\n    repos_sort : string;\r\n    constructor(username : string){\r\n        this.client_ID = '***REMOVED***';\r\n        this.client_secret = '***REMOVED***';\r\n        this.user = username;\r\n        this.apiUrl = \"https://api.github.com/users/\";\r\n        this.repos_count = 5;\r\n        this.repos_sort = 'created: asc';\r\n    }\r\n\r\n    async getUserData() : Promise<{profile : Object, repos : Array<Object>}>{\r\n        let urlProfile : string = `${this.apiUrl}${this.user}?client_id=${this.client_ID}&client_secret=${this.client_secret}`;\r\n        let urlRepos : string = `${this.apiUrl}${this.user}/repos?per_page=${this.repos_count}&sort=${this.repos_sort}&client_id=${this.client_ID}&client_secret=${this.client_secret}`;\r\n\r\n        const responseProfile = await fetch(urlProfile);\r\n        const responseRepos = await fetch(urlRepos);\r\n\r\n        const profile = await responseProfile.json();\r\n        const repos = await responseRepos.json();\r\n\r\n        return {\r\n            profile,\r\n            repos\r\n        };\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport { GitHub } from './github';\n\nclass GithubDisplay extends React.Component<{}, {APIData : any}> {\n\tgithub : GitHub = new GitHub('hannesottt');\n\n\tcomponentDidMount() {\n\t\tthis.github.getUserData()\n\t\t\t.then(data => {\n\t\t\t\tthis.setState({APIData: data})\n\t\t\t});\n\t}\n\n\trenderPfpColumn() : JSX.Element {\n\t\treturn (\n\t\t\t<div className=\"col bg-dark text-white pfp-column\">\n\t\t\t\t<img className=\"img-thumbnail mx-auto d-block\" alt=\"Profile picture\" src={this.state.APIData.profile.avatar_url}></img>\n\t\t\t\t<h2 className=\"text-center\">{this.state.APIData.profile.name}</h2>\n\t\t\t\t<h4 className=\"text-center profile-login\">{this.state.APIData.profile.login}</h4>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderButtons() : JSX.Element {\n\t\treturn (\n\t\t\t<div className=\"col button-column text-center\">\n\t\t\t\t<a className=\"btn btn-dark text-white\" href={this.state.APIData.profile.html_url}>Profile Link</a>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderRepo(index : number) : JSX.Element {\n\t\tlet repoData = this.state.APIData.repos[index];\n\t\treturn (\n\t\t\t<div className=\"col-lg-8 offset-lg-2 repo-column\" key={repoData.id}>\n\t\t\t\t<div className=\"card\">\n\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t<h5 className=\"card-title\"><a href={repoData.html_url}>{repoData.full_name}</a><span className=\"float-right\">{repoData.language}</span></h5>\n\t\t\t\t\t\t<div className=\"card-info\">{repoData.watchers_count} watching; {repoData.stargazers_count} stars; {}{repoData.forks_count} forks</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\trender() {\n\t\tconsole.log(this.state);\n\t\tif (this.state) {\n\t\t\tlet repoElements : JSX.Element[] = new Array();\n\t\t\tfor (let i = 0; i < this.state.APIData.repos.length; i++) {\n\t\t\t\trepoElements.push(this.renderRepo(i));\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<div className=\"container-fluid\">\n\t\t\t\t\t{this.renderPfpColumn()}\n\t\t\t\t\t{this.renderButtons()}\n\t\t\t\t\t<h4 className=\"text-center repo-title\">Repositories</h4>\n\t\t\t\t\t{repoElements}\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"text-center\">Loading...</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nReactDOM.render(<GithubDisplay />, document.getElementById('root'));\n"],"sourceRoot":""}